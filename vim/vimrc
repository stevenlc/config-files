" This file should be named .vimrc and placed in ~/.vimrc
" This assumes pathogen.vim is installed:
"    mkdir -p ~/.vim/autoload ~/.vim/bundle && \
"    curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
" from there, you can install bundles by git cloning the repos into the
" ~/.vim/bundles directory."
" To simplify this process, all the commands needed to clone+install the repos
" are in the install-bundles.sh script

"------  Bring in basic behavior  ------"
source $HOME/.vimrc_basic

" Ale conflicts with Syntastic, so disable syntastic
let g:ale_emit_conflict_warnings = 0

"----- Required for Pathogen.vim -----"
execute pathogen#infect()

"------  NERDTree Options  ------"
" start NERDTree upon vim startup
" autocmd vimenter * NERDTree

let NERDTreeIgnore=['\.git$', '\.pyc$', '__pycache__']

" following line finds the current file in NERDTree when pressing <Leader>a
map <Leader>a :NERDTreeFind<C-M>

" toggle nerdtree
map <Leader>q :NERDTreeToggle<CR>

" quit vim if NERDTree is last buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" [buffer number] followed by filename:
set statusline=[%n]\ %t

" "----- Syntastic Options -----"
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" " set statusline+=%*
" " show line#:column# on the right hand side
" set statusline+=%=%l:%c)
" 
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" Disable Syntastic
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

"----- Ale Options -----"
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0

"----- ESLint ----- "
let g:syntastic_javascript_checkers=['eslint']
" let g:syntastic_javascript_eslint_exe='$(npm bin)/eslint'
let g:syntastic_javascript_eslint_exe = 'npm run lint --'

"----- VIM Airline ------"
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

"----- BufferGator -----"
" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" I want my own keymappings...
let g:buffergator_suppress_keymaps = 1

" Looper buffers
"let g:buffergator_mru_cycle_loop = 1

" Go to the previous buffer open
nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Go to the next buffer open
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
" nmap <leader>bl :BuffergatorOpen<cr>
nmap <leader>b :BuffergatorOpen<cr>

nmap <leader>T :enew<cr>
nmap <leader>bq :bp <BAR> bd #<cr>

"----- Distinguished color scheme -----" 
" set t_Co = 256
syntax on
set background=dark
colorscheme distinguished

"----- DelimitMate -----"
" add key mapping to create a new line after paren/brace matching
imap <C-c> <CR><CR><Esc>ki<Tab>

"----- YouCompleteMe -----"
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview

"----- vim-indent-guides -----"
" enable on startup
" this can be toggled with :IndentGuidesEnable :IndentGuidesDisable
" :IndentGuidesToggle
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
set background=dark 
set autoindent

"----- Set .ejs to use html bindings -----"
au BufNewFile,BufRead *.ejs set filetype=html

"------  Always use the mouse  ------"
set mouse=a

"----- Allow for easy mouse toggling -----"
nnoremap <Leader>m :call ToggleMouse()<CR>
function! ToggleMouse()
    if &mouse == 'a'
        set mouse=
        echo "Mouse usage disabled"
    else
        set mouse=a
        echo "Mouse usage enabled"
    endif
endfunction

"----- Share clipboard -----"
set clipboard^=unnamed
if has('unnamedplus')
    set clipboard^=unnamedplus
endif

