" This file should be named .vimrc and placed in ~/.vimrc
" This assumes pathogen.vim is installed:
"    mkdir -p ~/.vim/autoload ~/.vim/bundle && \
"    curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
" from there, you can install bundles by git cloning the repos into the
" ~/.vim/bundles directory. Here are the ones I use: 
"   delimitMate.vim         - auto-closing (s and {s
"   nerdtree                - tree navigator
"   syntastic               - code linting. finding common errors
"                           - for javascript coding, also install jshint via npm
"   tern_for_vim            - autocomplete. needs youcompleteme
"   vim-distinguished       - vim terminal color scheme
"   vim-indent-guides
"   vim-javascript
"   vim-javascript-syntax
"   youcompleteme           - syntax suggestions
"
"------  Bring in basic behavior  ------"
source $HOME/.vimrc_basic

""----- Required for Pathogen.vim -----"
execute pathogen#infect()

"------  NERDTree Options  ------"
" start NERDTree upon vim startup
" autocmd vimenter * NERDTree

let NERDTreeIgnore=['\.git$', '\.pyc$', '__pycache__']

" following line finds the current file in NERDTree when pressing <Leader>a
map <Leader>a :NERDTreeFind<C-M>

" quit vim if NERDTree is last buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" [buffer number] followed by filename:
set statusline=[%n]\ %t

"----- Syntastic Options -----"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" show line#:column# on the right hand side
set statusline+=%=%l:%c)

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"----- Distinguished color scheme -----" 
" set t_Co = 256
syntax on
set background=dark
colorscheme distinguished

"----- DelimitMate -----"
" add key mapping to create a new line after paren/brace matching
imap <C-c> <CR><CR><Esc>ki<Tab>

"----- YouCompleteMe -----"
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview

"----- vim-indent-guides -----"
" enable on startup
" this can be toggled with :IndentGuidesEnable :IndentGuidesDisable
" :IndentGuidesToggle
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
set background=dark 
set autoindent

"----- Set .ejs to use html bindings -----"
au BufNewFile,BufRead *.ejs set filetype=html

"------  Always use the mouse  ------"
set mouse=a

"----- Allow for easy mouse toggling -----"
nnoremap <Leader>m :call ToggleMouse()<CR>
function! ToggleMouse()
    if &mouse == 'a'
        set mouse=
        echo "Mouse usage disabled"
    else
        set mouse=a
        echo "Mouse usage enabled"
    endif
endfunction

"----- Share clipboard -----"
set clipboard^=unnamed
if has('unnamedplus')
    set clipboard^=unnamedplus
endif

